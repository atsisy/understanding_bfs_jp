#+TITLE: Boot File SystemのLinux実装を読む file.c編

Linux kernel 4.14.5のfs/bfs/file.cを対象にソースコードを読んでいきます。

* ブロック操作
** bfs_move_block関数
*** 概要
    あるブロックのデータを他のブロックにコピーする。
    関数名はmoveだが、アセンブリのmovのような意味。
*** 引数
**** 第一引数
     unsinged long from
     コピー元のブロックの論理番号
**** 第二引数
      unsigned long to
      コピー先のブロックの論理番号
**** 第三引数
    struct super_block *sb
    このファイルシステムのスーパブロックを表すsuper_block構造体へのポインタ
*** 返り値
    終了ステータスを返す。成功すれば0が、失敗すればそのエラーコードが返る。
*** 1行目
    バッファキャッシュを指し、参照カウントを保持する構造体であるbuffer_head構造体へのポインタ型変数の
    bh、newを宣言しています。
*** 2行目
    sb_bread関数でバッファキャッシュを作り出しています。sb_bread関数に渡す引数は、
    bfs_move_block関数が受け取った引数であるsuper_block構造体のsb、ブロックの論理番号が
    格納されているfromを渡している。これにより、fromが指す1ブロック分のデータをメモリにキャッシュできます。
*** 3~4行目
    sb_breadが失敗した場合、NULLが帰ってきます。NULLが帰ってきていた場合、EIOエラーコードを返して終了します。
*** 5行目
    sb_getblk関数が使われています。この関数の動作がいまいちわからないので、ソースコードを見てみることにします。
#+BEGIN_SRC c
/////
// include/linux/buffer_head.h sb_getblk関数
/////
static inline struct buffer_head *
sb_getblk(struct super_block *sb, sector_t block)
{
	return __getblk_gfp(sb->s_bdev, block, sb->s_blocksize, __GFP_MOVABLE);
}

/////
// fs/buffer.c __getblk_gfp関数
// sb_getblk関数から呼び出されている
/////
/*
 * __getblk_gfp() will locate (and, if necessary, create) the buffer_head
 * which corresponds to the passed block_device, block and size. The
 * returned buffer has its reference count incremented.
 *
 * __getblk_gfp() will lock up the machine if grow_dev_page's
 * try_to_free_buffers() attempt is failing.  FIXME, perhaps?
 */
struct buffer_head *
__getblk_gfp(struct block_device *bdev, sector_t block,
	     unsigned size, gfp_t gfp)
{
	struct buffer_head *bh = __find_get_block(bdev, block, size);

	might_sleep();
	if (bh == NULL)
		bh = __getblk_slow(bdev, block, size, gfp);
	return bh;
}
#+END_SRC
    __getblk_gfp関数の上部のコメントを読むと、どうやらbuffer_head構造体を確保する関数のようです。
    また、sb_breadが呼び出している__bread_gfpのソースを見てみると、その中で__getblk_gfpを呼び出しています。
    なので、だいたい同じ処理をしますが、違いは、キャッシュされているかを調べているかがsb_getblkで、
    調べないのがsb_breadかと思われます。
*** 6行目
    buffer_head構造体のb_sizeフィールドにはブロックのサイズが格納されているため、
    newが指すキャッシュにbhのキャッシュを上書きすることになります。
*** 7行目
    newが指すキャッシュに変更があり、ディスクの情報と矛盾が生じていること通知します。
*** 8行目
    bforget関数は初出ですので、ソースを詳しく見ていきます。
    基本的な動作はbrelseに似ています。
#+BEGIN_SRC c
/////
// include/linux/buffer_head.h bforgot関数
/////
static inline void bforget(struct buffer_head *bh)
{
	if (bh)
		__bforget(bh);
}

/////
// fs/buffer.c __bforget関数
/////
/*
 * bforget() is like brelse(), except it discards any
 * potentially dirty data.
 */
void __bforget(struct buffer_head *bh)
{
	clear_buffer_dirty(bh);
	if (bh->b_assoc_map) {
		struct address_space *buffer_mapping = bh->b_page->mapping;

		spin_lock(&buffer_mapping->private_lock);
		list_del_init(&bh->b_assoc_buffers);
		bh->b_assoc_map = NULL;
		spin_unlock(&buffer_mapping->private_lock);
	}
	__brelse(bh);
}
#+END_SRC
    コメントを見る限り、bforgot関数は、brelseとは異なり、その場ですぐにそのデータを破棄するようです。
    それは、誰かがそのキャッシュを参照していたとしても削除します。ここがbrelse関数とは異なる点です。
*** 9行目
    brelse関数でnewを解放します。これはbrelseでの解放なので、誰かがこのキャッシュを参照
    していた場合、すぐには解放されません。
*** 10行目
    エラーは起きなかったので、0を返却します。
    
** bfs_move_blocks関数
*** 概要
    複数のブロックのデータを一度にコピーする関数
*** 引数
**** 第一引数
     struct super_block *sb
     このファイルシステムのスーパブロックを表すsuper_block構造体
**** 第二引数
     unsigned long start
     コピーを開始するブロックの論理番号
**** 第三引数
     unsigned long end
     コピーを終了するブロックの論理番号
**** 第四引数
     unsigned long where
     コピー先の先頭ブロックの論理番号
*** 返り値
    成功した場合は0、失敗した場合は-EIOが返る。
*** 1行目
    カウンタ変数としてunsigned int型で変数iを宣言しています。
*** 2行目
    デバッグ用出力として、複製の開始ブロックと終了地点のブロックの論理番号、さらに、コピー先の
    先頭のブロックの論理番号を出力しています。
*** 3~8行目
**** 3行目
     forループです。iはstartからendまでの範囲を1ずつ増えていきます。
**** 4行目
     bfs_move_block関数を呼び出しています。これにより、iからwhere+1のブロックにデータがコピーされます。
     この関数は、成功すると0を返します。失敗すると、-EIOを返すため、失敗した場合、次のコードに進みます。
     成功すれば、そのままループが継続されます。
**** 5~7行目
     このコードに到達するのは、bfs_move_block関数が失敗したときです。
     処理の内容としては、失敗したことを伝えるメッセージを出力し、EIOエラーを返して終了します。
     エラーメッセージには、コピーに失敗したブロックの論理番号を出力します。
**** 8行目
     何事も無く終了したため、0を返し、成功を伝えます。
** bfs_get_block関数
*** 概要
    bfs_get_block関数は、bfs_readpage関数や、bfs_writepage関数でカーネルにその関数ポインタを渡されています。
    この関数が行うべき処理は、inodeが指すファイルの指定ブロック番号(引数 sector_t block)がディスク上のどのブロックにマップされているかを
    論理番号で返すというものです。
    ※この関数についての説明は解説を行っている記事によって異なる情報がいくつもありましたが、今回はとりあえずこれで概要とします※
*** 引数
    | 第一引数 | struct inode *inode           | 指定するファイルのinode                                                        |
    | 第二引数 | sector_t block                | カーネル向け論理番号を知りたい、ファイルの先頭ブロックからのブロックオフセット |
    | 第三引数 | struct buffer_head *bh_result | 結果を格納するためのバッファを指すbuffer_head構造体へのポインタ                |
    | 第四引数 | int create                    | ファイルの拡張を行うかどうかのフラグ                                                                                         |
*** 返り値
    終了ステータスを返します。
    | ステータス | 返り値  |
    | 正常終了   | 0       |
    | 領域不足   | -ENOSPC |
*** 1~5行目
    各種変数宣言を行っています。
    一応、下の3つの変数について軽く説明を行いたいと思います。
**** struct super_block *sb = inode->i_sb;
     inode構造体のi_sbフィールドには、このファイルシステムのスーパブロックを表すsuper_block構造体へのポインタ
     が格納されています。（inode.c編 bfs_write_inode関数 1~4行目参照）
     これをsuper_block構造体へのポインタであるsbに代入しています。
**** struct bfs_sb_info *info = BFS_SB(sb);
     BFS_SBインライン関数は、super_block構造体のs_fs_infoフィールドを取り出し、返します。
     s_fs_infoにはファイルシステムのプライベートな情報を格納していて（bfs_sb_info）これを
     infoに代入しています。
**** struct bfs_inode_info *bi = BFS_I(inode);
     BFS_Iインライン関数は引数に受け取ったinode構造体が所属しているbfs_inode_info構造体へのポインタを返します。
     つまりそういうことです。
*** 6行目
    変数physにbi->i_sblock（ファイルの開始ブロックの論理番号）と引数で受け取ったsector_t型のblockの和
    を代入しています。このblockはカーネルが管理するこのファイルシステムの論理ブロック番号になります。
    これによって、ファイルが位置しているであろうブロックがディスク上のどこの論理番号を持つかを一応計算
    することができます。
*** 7行目
    引数で渡されるカーネルからの指定である、createフラグを確認しています。
    createフラグが立っている場合、指定されたファイルが存在していないとき、
    新規ファイルを作成し、返すべきブロックの論理番号を計算しようとします。
    ここの分岐では、createフラグが立っていない場合にtrueになり、ブロック内の処理を実行していきます。
    createフラグが立っている場合は、後ろにずらずらと書いてある処理を実行していくことになります。
*** 8行目
    bi->i_eblockはinodeが指すファイルの終端ブロックの論理番号が格納されています。
    これが、先程計算したphysよりも小さい時、目的の値の計算を行っていき、falseだった場合は、
    失敗として、何も行わず0を返します。
    なぜ、phys <= bi->i_eblockがfalseだと失敗なのかというと、要求されたファイルのブロック番号は、ファイルの終端のブロック番号
    よりも小さい、つまり、要求されたブロックはそのファイルに使用されていないということであり（オーバランしている）、処理は遂行できないので、失敗となります。
    ※ここで言う目的の値とは、引数で受け取ったinodeが指すファイルの先頭ブロックから引数で受け取ったブロックの論理番号分先の
    論理番号です。※
*** 9行目
    デバッグ用出力として、createフラグ、block、physを表示しています。
*** 10行目
    ここではmap_bh関数を使用して引数で受け取っているbuffer_head構造体のポインタが指すオブジェクトに
    計算結果を適用しています。これだけで終わると味気ないので、map_bh関数のソースを簡単に読んでことにします。(コメントだけ)
#+BEGIN_SRC c
/////
// include/linux/buffer_head.h map_bh関数
/////
static inline void
map_bh(struct buffer_head *bh, struct super_block *sb, sector_t block)
{
        /** 筆者コメント **/
	// 恐らく、このバッファは使用済みですというフラグを立てている(?)
	//
	set_buffer_mapped(bh);

	/** 筆者コメント **/
	// ブロックデバイス情報をコピー
	//
	bh->b_bdev = sb->s_bdev;

	/** 筆者コメント **/
	// 計算したブロックの論理番号を代入
	//
	bh->b_blocknr = block;

	/** 筆者コメント  **/
	// このbuffer_headが指すマップされた領域のサイズを設定。
	// sb->s_blocksizeは1ブロック当たりのサイズ
	//
	bh->b_size = sb->s_blocksize;
}
#+END_SRC
*** 12行目
    0を返して終了
*** 15~18行目
    19行目に出現するif分岐の説明を行っています。
    適当に訳したものをいかに示しておきます。

#+BEGIN_SRC

    ファイルが空でなく、リクエストされたブロックが、このファイルが確保されているブロック領域範囲内であれば、
    それはtrueとする。

#+END_SRC
    
    という具合でしょうか。
*** 19行目
    19行目です。以下のようなコードになっています。
#+BEGIN_SRC c
    if (bi->i_sblock && (phys <= bi->i_eblock)){ //~~// }
#+END_SRC
    上の15~18行目のコメントを見ると、このif文の意味が理解できると思います。
    bi->i_sblockはファイルが書き込まれているブロック領域の先頭のブロックの論理番号が格納されています。
    つまり、bi->i_sblockが0ではない、有効な値を持っていれば、一つ目の条件はtrueになります。
    ２つ目の条件、phys <= bi->i_eblockは、8行目と同じ条件です。
    計算した値phys（指定されたファイルの、指定されたブロックオフセット分のブロックの論理番号）がファイルの末端ブロック
    以下であることで、trueとなります。（オーバランしていない）
*** 20~23行目
    9~12行目と同様の処理を行っています。
*** 25行目
    26行目に出現するif分岐の説明を行っています。
    適当に訳したものを以下に示しておきます。

#+BEGIN_SRC

    ファイルは拡張されます。なので、ファイルを拡張する分だけの十分な領域があるか見てみましょう。

#+END_SRC

    簡単ですね。
*** 26行目
    条件式: if (phys >= info->si_blocks)の解説を行いたいと思います。
    info->si_blocksには、このファイルシステムが持つブロックの総数が格納されています。

    （この場合は、createフラグが立っているため、ファイルが拡張されることを頭に入れておいてください）
    つまり、要求されるブロック番号が、ブロックの総数よりも大きいかどうかを確認しています。
    BFSでは、基本的にファイルは連続したブロックで管理されます（連続アロケーション）。なので、この条件式
    により、拡張に十分な領域があるかどうかを確認できるわけです。
**** 余談
     連続アロケーションはファイルシステムにおけるファイルのマップ方法の一つです。
     この他にも、リンクリストアロケーションなどの手法があります。
*** 27行目
    26行目の条件式がtrueになるということは、拡張に十分な領域が存在していないということです。
    したがって、処理を継続することは困難なので、ENOSPCエラーを返して終了しています。
*** 30行目
    mutex_lockでinfo->bfs_lockのロックを掛けています。
    この先、ファイルの拡張やら、移動が行われることが予想されるため、ここでロックを掛けているのでしょう。
    上部のコメントを読んでみると、

#+BEGIN_SRC
    残りは自分自身から保護されています。
#+END_SRC

    コメントはよくわからないですが、コードを見れば、やりたいことはわかるはずです。
*** 32~36行目
    ながながと37行目のif文とそのブロックについて記述してありますが、訳してしまえば、簡単です。
    
#+BEGIN_SRC
    もし、このファイルの末端ブロックが、このファイルシステムで使用済みの最後ブロックだった場合、
    特にファイルの移動等をやること無く、拡張できますね。
#+END_SRC

    てな感じで書いてあります。
*** 37行目
    if (bi->i_eblock == info->si_lf_eblk)
    この条件式は、上部のコメントどおりの処理になっています。
    info->si_lf_eblkはこのファイルシステムに存在するファイルのEOFが書き込まれているブロックの論理番号が格納されています。
    (inode.c編に記述していたと思います)
    そして、bi->i_eblockは、このファイルの末端ブロックの論理番号を示すため、この条件式が表すことは、以下のようになります。
    

    このファイルの末端ブロックの論理番号とこのファイルシステムに存在するファイルのEOFが書き込まれているブロックの論理番号が等しい


    まさに上部のコメントどおりといったところでしょうか。
*** 38~40行目
    9~12行目,20~23行目と同様の処理を行っています。
*** 41行目
    info->si_freeb -= phys - bi->i_eblock
    info->si_freebはこのファイルシステムに存在している空きブロックの数になっています。
    phys - bi->i_eblockの計算結果は、ファイルをあと何ブロック拡張する必要があるかを表します。
    つまり、ファイルを拡張する分だけ、空きブロックの数を減らしています。
*** 42行目
    info->si_lf_eblk = bi->i_eblock = phys
    このブロックに入ってくる条件として、37行目の条件式を満たす必要があります。
    条件を満たす要件は37行目の解説で行っているので、それを理解した上での説明をします。
    
    physの値までブロックを拡張しなければいけないわけですから、必然的に、
    現在のファイルの末端ブロックの値は、physになり、
    info->si_lf_eblkもphysになるわけです。
*** 43行目
    メモリ上のinodeの内容を変更し、ディスクの内容と矛盾が生じているため、mark_inode_dirty関数を使い、
    dirty状態にしています。いい感じの頃合いに、ディスク上のデータは変更されます。
*** 44,45行目
    終了ステータスを格納しておくerr変数に、通常終了を知らせる0を代入し、
    outラベルにジャンプしています。
*** 48行目
    これ以降の処理について簡単にコメントを残しています。
    いい感じに翻訳してみたいと思います。

#+BEGIN_SRC
    OK. このファイル全体を、拡張を行うために、次の空きブロック領域に移す必要があります。
#+END_SRC

    この翻訳だと、誤解を生みかねないので、図を作りました。そちらも参考にしてください。
    
[[./image/get_block1.png]]
[[./image/get_block2.png]]

*** 49行目
    phys = info->si_lf_eblk + 1
    この処理は上記のコメントを早とちりしてしまうと、意味がわからなくなってしまうかもしれません。
    ここで行っていることは、ただ単に、physに次の空きブロック領域の先頭の論理番号を代入しているだけです。
*** 50行目
#+BEGIN_SRC c
    if (phys + block >= info->si_blocks)
#+END_SRC
    ここで、条件分岐が発生します。
    まず、phys + blockは、ファイル移動後の、求めていた論理番号となります。なぜなら、上の行でphysには
    次の空き領域の先頭のブロックの論理番号が入っていて、それにblockを足しているからです。
    
    そして、その値が、info->si_blocksよりも大きいかどうか判定しています。info->si_blocksにはこのファイルシステム
    が持つ総ブロック数が格納されています。したがって、左辺のほうが大きいとなると、このファイルシステムに収まりきらず
    オーバーフローしてしまいます。なので、次の2行に示されるエラー処理に移るわけです。
*** 51,52行目
    終了ステータスを格納しておくerr変数に、-ENOSPCを代入しています。この理由は、50行目の解説で行っています。
    その後、outラベルにジャンプして終了です。
*** 55行目
#+BEGIN_SRC c
    if (bi->i_sblock)
#+END_SRC
    この条件式は単純ですね。bi->i_sblockにはファイルの開始ブロックの論理番号が格納されています。
    この値が0になるということは、普通ありえないので、移動の作業は行いません。
    それ以外の場合、移動作業に写っていきます。
*** 56,57行目
    bfs_move_blocks関数を呼び出し、その返り値をerr変数に代入しています。
    bfs_move_blocks関数については、上で解説を行っているので、それを参照してください。
    ひとまず、これで移動作業が行われ、その終了状況がerr変数に代入されました。
*** 58行目
    bfs_move_blocks関数の返り値はerrに格納されています。正常終了の場合、errには0が格納され、
    エラーだった場合は、0以外の値が入っています。したがって、この条件式

#+BEGIN_SRC c
    if (err)
#+END_SRC

    これは、エラーの場合、trueになるわけですね。
*** 59~61行目
    ファイルの移動がエラーで終了した場合、この処理を実行することになります。
    実行する処理としては、デバッグ用出力として、inode番号を出力しています。
    その後、outラベルにジャンプしています。
*** 64行目
    55行目で行った条件分岐で、bi->i_sblockの値が、0のだった場合、ここの処理が実行されます。
    見たまんまで、err変数に0を代入しているだけです。
*** 65,66行目
    デバッグ用の出力を行っています。
*** 67行目
    ファイルの移動を行ったため、もちろん、ファイルの開始ブロックの論理番号情報は変更されなければなりません。
    なので、bi->i_sblockにphysを格納しています。
    （physには、移動先の先頭ブロックの論理番号が格納されています。49行目参照）
*** 68行目
    physにblockを足しています。これは、この関数で求めるべき値となります。
    やっとここで、本題の処理を行うことができるわけです。
*** 69行目
#+BEGIN_SRC c
    info->si_lf_eblk = bi->i_eblock = phys
#+END_SRC
    ファイルは空き領域の先頭へ移動され、さらに拡張されているため、info->si_lf_eblk(使用されている最後のブロック)と
    bi->i_eblock（このファイルの末端ブロック）にはphysが入るべきです。なので、この処理を行っています。
*** 71~74行目
    ここの部分のコメントは次の計算の説明を行っています。
    コメントの訳を以下に示します。
#+BEGIN_SRC

ここにいる間は、誰もinodeに書き込めないと仮定します。
したがって、inode->i_blocksを更新してください。

#+END_SRC
    
    プログラム中では、inode->i_blocksに変更を加えているコードはどこにもありませんが、どこでupdateしているのでしょうか
*** 75行目
    ここでは次のような計算を行っています。
#+BEGIN_SRC c
    bi->i_eblock - bi->i_sblock + 1 - inode->i_blocks;
    /*
    移動先のファイルの末端ブロックの論理番号 - 移動先のファイルの開始ブロックの論理番号
                                  + 1 - 元々ファイルが使用していたブロックの総数
    */
#+END_SRC
    この計算から読み取れることとしては、以下のように理解していくことができます。
**** 1.bi->i_eblock - bi->i_sblock + 1
     移動後のファイルが使用するブロックの総数
**** 2.1の計算結果 - inode->i_blocks
     新しく使用することになったブロックの総数 - 元々使用していたブロック総数ですから、
     空きブロックの数がこの計算で求めることができるわけですね。
*** 76行目
    inodeをdirty状態にし、いい頃合いでディスクにその内容が反映されるようにしています。
*** 77行目
    map_bh関数で、求めたphysらをバッファに適用ししています。
    map_bh関数については、10行目の解説の部分で触れているので、詳しいどうさはそこを参照してください。
*** 78行目
    outラベルです。
    これ以降はミューテックスロックを解除して終了となります。
*** 79行目
    inodeの変更に関わる処理は終了したので、このファイルシステム用のmutexを解除しています。
*** 80行目
    終了ステータスを返して終了です。
* ページ処理
** bfs_readpage関数
*** 概要
    引数で渡されるpage構造体が指すページに対応するブロックからデータを読み取り、
    そのデータをページキャッシュに格納する処理をベースとして、BFS独自に実装を行う。
*** 引数
**** 第一引数
     struct file *file
     今回は使用しません。
**** 第二引数
     struct page *page
     データを格納するページを表すpage構造体へのポインタ
*** 返り値
    基本的に0を返します。
*** 1行目
    block_read_full_page関数を呼び出しています。その結果を返し、終了です。
    この関数に渡している引数は、ページキャッシュを指すpage構造体へのポインタと、
    BFSのブロックを読み込むための関数であるbfs_get_blockの関数ポインタを渡しています。
    ここで軽くblock_read_full_page関数について説明を行っていきます。
**** block_read_full_page関数
***** 概要
      引数で渡されるpage構造体が指すページに対応するブロックからデータを読み取り、
      そのデータをページキャッシュに格納します。
***** ソースコード
#+BEGIN_SRC c
/////
// fs/buffer.c block_read_full_page関数
/////
/*
 * Generic "read page" function for block devices that have the normal
 * get_block functionality. This is most of the block device filesystems.
 * Reads the page asynchronously --- the unlock_buffer() and
 * set/clear_buffer_uptodate() functions propagate buffer state into the
 * page struct once IO has completed.
 */
int block_read_full_page(struct page *page, get_block_t *get_block)
{
	struct inode *inode = page->mapping->host;
	sector_t iblock, lblock;
	struct buffer_head *bh, *head, *arr[MAX_BUF_PER_PAGE];
	unsigned int blocksize, bbits;
	int nr, i;
	int fully_mapped = 1;

	head = create_page_buffers(page, inode, 0);
	blocksize = head->b_size;
	bbits = block_size_bits(blocksize);

	iblock = (sector_t)page->index << (PAGE_SHIFT - bbits);
	lblock = (i_size_read(inode)+blocksize-1) >> bbits;
	bh = head;
	nr = 0;
	i = 0;

	do {
		if (buffer_uptodate(bh))
			continue;

		if (!buffer_mapped(bh)) {
			int err = 0;

			fully_mapped = 0;
			if (iblock < lblock) {
				WARN_ON(bh->b_size != blocksize);
				err = get_block(inode, iblock, bh, 0);
				if (err)
					SetPageError(page);
			}
			if (!buffer_mapped(bh)) {
				zero_user(page, i * blocksize, blocksize);
				if (!err)
					set_buffer_uptodate(bh);
				continue;
			}
			/*
			 * get_block() might have updated the buffer
			 * synchronously
			 */
			if (buffer_uptodate(bh))
				continue;
		}
		arr[nr++] = bh;
	} while (i++, iblock++, (bh = bh->b_this_page) != head);

	if (fully_mapped)
		SetPageMappedToDisk(page);

	if (!nr) {
		/*
		 * All buffers are uptodate - we can set the page uptodate
		 * as well. But not if get_block() returned an error.
		 */
		if (!PageError(page))
			SetPageUptodate(page);
		unlock_page(page);
		return 0;
	}

	/* Stage two: lock the buffers */
	for (i = 0; i < nr; i++) {
		bh = arr[i];
		lock_buffer(bh);
		mark_buffer_async_read(bh);
	}

	/*
	 * Stage 3: start the IO.  Check for uptodateness
	 * inside the buffer lock in case another process reading
	 * the underlying blockdev brought it uptodate (the sct fix).
	 */
	for (i = 0; i < nr; i++) {
		bh = arr[i];
		if (buffer_uptodate(bh))
			end_buffer_async_read(bh, 1);
		else
			submit_bh(REQ_OP_READ, 0, bh);
	}
	return 0;
}
#+END_SRC
***** 処理の流れ
      1.buffer_head構造体の初期化（データの読み出し）
      2.初期化のエラーチェック
      3.バッファをロックし、同期を行う
      4.既にバッファが最新状態なら、そのバッファのREAD I/Oが終了したことをカーネルに通知し、
        そうでなければ、submit_bh関数を使って、カーネルに1ブロック分のデータを要求します。
	このとき、buffer_head構造体にブロックの論理番号などの情報が入っているので、
	submit_bhには読み込みを要求するREQ_OP_READとオプション（0）、bhだけを渡しています。
** bfs_writepage関数
*** 概要
    引数で渡されるpage構造体が指すページに対応するキャッシュを記憶装置と矛盾が無いように書き込む要請
    をカーネルに行います。これをBFSに対応した形で定義を行います。
*** 引数
**** 第一引数
     struct page *page
     Dirtyな状態のページキャッシュを指すpage構造体へのポインタ。
**** 第二引数
     struct writeback_control *wbc
     WriteBack処理を管理するためのwriteback_control構造体へのポインタ。
     WriteBack処理等を自前で実装するときに必要になるため、カーネルから渡される。
*** 返り値
*** 1行目
    block_write_full_page関数を呼び出しています。その結果を返し、終了です。block_read_full_pageと似ています。
    この関数に渡している引数は、ページキャッシュを指すpage構造体へのポインタと、
    BFSのブロックを読み込むための関数であるbfs_get_blockの関数ポインタを渡しています。
**** block_write_full_page関数
     block_read_full_page関数と同様で、WriteBack処理を行うための関数です。この関数が主に扱う処理は、
     WriteBack処理の書き込み操作の部分です。渡したDirtyなページの情報の同期をカーネルに要請します。
** bfs_write_begin関数
*** 概要
    ページに書き込む処理の前に、目的のページは確保されているのかなどの確認。
    必要な際はページの確保などを行う。
*** 引数
    | 第一引数 | struct file *file             | このページ操作に関わってくるファイル                      |
    | 第二引数 | struct address_space *mapping | 書き込むページを表すaddress_spaceオブジェクトへのポインタ |
    | 第三引数 | loff_t pos                    | 書き込み開始位置のバイト単位でのオフセット                |
    | 第四引数 | unsigned len                  | 書き込みを行うバイト単位のサイズ                          |
    | 第五引数 | unsigned flags                | include/linux/fs.hに記述されたフラグ値。詳細は下記        |
    | 第六引数 | struct page **pagep           | 準備するページのポインタをこの変数に代入する必要がある。  |
    | 第七引数 | void **fsdata                 | ファイルシステム固有データへのポインタ                    |                                                                                                       |
**** 第五引数について
     以下の2種類のフラグが入っています
#+BEGIN_SRC c
#define AOP_FLAG_CONT_EXPAND		0x0001 /* called from cont_expand */
#define AOP_FLAG_NOFS			0x0002 /* used by filesystem to direct
						* helper code (eg buffer layer)
						* to clear GFP_FS from alloc */
#+END_SRC
*** 返り値
    正常終了時は0を返し、失敗した場合、0以外の値を返します。
*** 1行目
    終了ステータスを保持しておくための変数iを宣言しています。
*** 2~3行目
#+BEGIN_SRC c
    ret = block_write_begin(mapping, pos, len, flags, pagep,
				bfs_get_block);
#+END_SRC
    ここでblock_write_begin関数を呼び出し、その結果をretに代入しています。
    恐らくこの関数はwrite_begin処理の汎用的な処理を担うものです。
    ページの探索、確保、ロック処理等を行ってくれます。
    また、この関数はLinuxのVFS層から提供されていることが予測されます。
*** 4~5行目
    unlikelyマクロを使用して、”無いとは思うけど・・・”とコンパイラに知らせています。
    この場合の条件は、retの値が、0（正常終了）ならばそのままretをreturnして終了。
    retに何らかのエラーが入っていた場合、次の項目で解説するbfs_write_failed関数を呼び出しています。
    関数名からして、失敗時の処理を行うっぽいです。
*** 6行目
    block_write_begin関数の返り値が入ったretを返しています。
** bfs_write_faild関数
*** 概要
    bfs_write_begin関数が失敗したときに呼び出される関数
    上記の関数で無駄に拡張をしてしまった場合のために、領域を切り詰め直す関数
*** 引数
    | 第一引数 | struct address_space *mapping | bfs_write_begin関数で書き込む準備をするはずだったページを表す |
    | 第二引数 | loff_t to                     | 書き込むはずだった領域の終端のバイトオフセット                |
*** 返り値
    void
*** 1行目
    address_space構造体のhostフィールドは、そのaddress_space構造体と関連付けられているinodeを表す
    inode構造体変数へのポインタです。なので、その変数を取り出し、ローカルなinode変数に格納しています。
*** 2~3行目
#+BEGIN_SRC c
    to > inode->i_size
#+END_SRC
    この条件式が表すことは以下のようなことです。
#+BEGIN_SRC txt
    書き込み先の終了地点までのバイトオフセット > inodeが指すファイルのサイズ
#+END_SRC
    この条件式がtrueになったとき、truncate_pagecache関数を呼び出しています。
    
    以下にtruncate_pagecache関数の定義を記述しておきます。
#+BEGIN_SRC c

/////
// mm/trancate.c truncate_pagecache関数
/////
/**
 * truncate_pagecache - unmap and remove pagecache that has been truncated
 * @inode: inode
 * @newsize: new file size
 *
 * inode's new i_size must already be written before truncate_pagecache
 * is called.
 *
 * This function should typically be called before the filesystem
 * releases resources associated with the freed range (eg. deallocates
 * blocks). This way, pagecache will always stay logically coherent
 * with on-disk format, and the filesystem would not have to deal with
 * situations such as writepage being called for a page that has already
 * had its underlying blocks deallocated.
 */
void truncate_pagecache(struct inode *inode, loff_t newsize)
{
	struct address_space *mapping = inode->i_mapping;
	loff_t holebegin = round_up(newsize, PAGE_SIZE);

	/*
	 * unmap_mapping_range is called twice, first simply for
	 * efficiency so that truncate_inode_pages does fewer
	 * single-page unmaps.  However after this first call, and
	 * before truncate_inode_pages finishes, it is possible for
	 * private pages to be COWed, which remain after
	 * truncate_inode_pages finishes, hence the second
	 * unmap_mapping_range call must be made for correctness.
	 */
	unmap_mapping_range(mapping, holebegin, 0, 1);   // 筆者追記 unmap
	truncate_inode_pages(mapping, newsize);          // 筆者追記 切り詰め
	unmap_mapping_range(mapping, holebegin, 0, 1);   // 筆者追記 再度unmap?
}
#+END_SRC
    関数上部のコメントを読む限り、この関数は、メモリ領域を切り詰められたページキャッシュをunmapし、
    removeするという役割のようです。
    つまり、この場合、書き込み先のファイルの先頭からのバイトオフセットが、このinodeが指すファイルの
    サイズより小さい場合、何もせず終了します。そうでない場合。バイトオフセットがファイルをオーバーラン
    してしまっている場合、inode構造体に格納されているファイルのサイズに、マッピングされたメモリを切り詰めます。
**** 思ったこと
     個人的にこの処理は意味がわからないのですが、なんとなく思ったことを書いておきます。
     

     ここでの処理は、bfs_write_begin関数で失敗した場合です。すなわち、bfs_write_beginで、
     新しく確保された可能性のある領域を切り詰めなおしているのではないかと思います。

** bfs_bmap関数
*** 概要
    ファイルが書き込まれているブロックの論理番号から、論理ブロック番号を取得するための関数
*** 引数
    | 第一引数 | struct address_space *mapping | ファイルのキャッシュページを表すaddress_spaceオブジェクトへのポインタ              |
    | 第二引数 | sector_t block                | 論理ブロック番号を知りたいブロックまでのファイルのオフセット（ブロックオフセット） |
*** 返り値
    | sector_t | 結果の論理ブロック番号 |
*** 1行目
    generic_block_bmap関数を呼び出し、その関数の返り値を返して終了です。
    このgeneric_block_bmap関数は、bmapの汎用的な処理を行ってくれる関数です。
    つまり、generic_block_bmapが返す論理ブロック番号をそのまま返しているだけです。
    

    このままだと味気ないので、軽くgeneric_block_bmapのソースコードを流し読みしましょう。
#+BEGIN_SRC c
/////
// fs/buffer.c generic_block_bmap関数
/////
sector_t generic_block_bmap(struct address_space *mapping, sector_t block,
			    get_block_t *get_block)
{
	struct inode *inode = mapping->host;
	struct buffer_head tmp = {
		.b_size = i_blocksize(inode),
	};

	get_block(inode, block, &tmp, 0);
	return tmp.b_blocknr;
}
#+END_SRC
    ここまで読み進めてくれば楽勝ですね。論理番号を求めるために、bfs_get_block関数をを渡しているため、
    それを使い、論理番号を計算しています。
* グローバルな構造体変数
** file_operations構造体
*** 概要
    このモジュールに対するシステムコールの対応を定義する。
#+BEGIN_SRC c
/////
// include/linux/fs.h file_operations構造体
/////
struct file_operations {
	struct module *owner;
	loff_t (*llseek) (struct file *, loff_t, int);
	ssize_t (*read) (struct file *, char __user *, size_t, loff_t *);
	ssize_t (*write) (struct file *, const char __user *, size_t, loff_t *);
	ssize_t (*read_iter) (struct kiocb *, struct iov_iter *);
	ssize_t (*write_iter) (struct kiocb *, struct iov_iter *);
	int (*iterate) (struct file *, struct dir_context *);
	int (*iterate_shared) (struct file *, struct dir_context *);
	unsigned int (*poll) (struct file *, struct poll_table_struct *);
	long (*unlocked_ioctl) (struct file *, unsigned int, unsigned long);
	long (*compat_ioctl) (struct file *, unsigned int, unsigned long);
	int (*mmap) (struct file *, struct vm_area_struct *);
	int (*open) (struct inode *, struct file *);
	int (*flush) (struct file *, fl_owner_t id);
	int (*release) (struct inode *, struct file *);
	int (*fsync) (struct file *, loff_t, loff_t, int datasync);
	int (*fasync) (int, struct file *, int);
	int (*lock) (struct file *, int, struct file_lock *);
	ssize_t (*sendpage) (struct file *, struct page *, int, size_t, loff_t *, int);
	unsigned long (*get_unmapped_area)(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
	int (*check_flags)(int);
	int (*flock) (struct file *, int, struct file_lock *);
	ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int);
	ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t, unsigned int);
	int (*setlease)(struct file *, long, struct file_lock **, void **);
	long (*fallocate)(struct file *file, int mode, loff_t offset,
			  loff_t len);
	void (*show_fdinfo)(struct seq_file *m, struct file *f);
#ifndef CONFIG_MMU
	unsigned (*mmap_capabilities)(struct file *);
#endif
	ssize_t (*copy_file_range)(struct file *, loff_t, struct file *,
			loff_t, size_t, unsigned int);
	int (*clone_file_range)(struct file *, loff_t, struct file *, loff_t,
			u64);
	ssize_t (*dedupe_file_range)(struct file *, u64, u64, struct file *,
			u64);
} __randomize_layout;
#+END_SRC
*** フィールド
    | llseek      | ファイルポインタを更新する処理           | llseekシステムコール呼び出し時                      |
    | read_iter   | 複数のバッファにファイルを読み込む場合   | readvシステムコール、preadvシステムコール呼び出し時 |
    | write_iter  | 複数のバッファからファイルに書き込む場合 | readvシステムコール、preadvシステムコール呼び出し時 |
    | mmap        | mmap処理を行う                           | mmapシステムコール呼び出し時                        |
    | splice_read | splice時に読み込みを行う                 | spliceシステムコール呼び出し時                      |
**** 余談
     これらの他に、open, releaseなどがある。
** address_space_operations構造体
*** 概要
    このモジュールのページ処理方法を定義する。
#+BEGIN_SRC c
/////
// include/linux/fs.h address_space_operations構造体
/////
struct address_space_operations {
	int (*writepage)(struct page *page, struct writeback_control *wbc);
	int (*readpage)(struct file *, struct page *);

	/* Write back some dirty pages from this mapping. */
	int (*writepages)(struct address_space *, struct writeback_control *);

	/* Set a page dirty.  Return true if this dirtied it */
	int (*set_page_dirty)(struct page *page);

	int (*readpages)(struct file *filp, struct address_space *mapping,
			struct list_head *pages, unsigned nr_pages);

	int (*write_begin)(struct file *, struct address_space *mapping,
				loff_t pos, unsigned len, unsigned flags,
				struct page **pagep, void **fsdata);
	int (*write_end)(struct file *, struct address_space *mapping,
				loff_t pos, unsigned len, unsigned copied,
				struct page *page, void *fsdata);

	/* Unfortunately this kludge is needed for FIBMAP. Don't use it */
	sector_t (*bmap)(struct address_space *, sector_t);
	void (*invalidatepage) (struct page *, unsigned int, unsigned int);
	int (*releasepage) (struct page *, gfp_t);
	void (*freepage)(struct page *);
	ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *iter);
	/*
	 * migrate the contents of a page to the specified target. If
	 * migrate_mode is MIGRATE_ASYNC, it must not block.
	 */
	int (*migratepage) (struct address_space *,
			struct page *, struct page *, enum migrate_mode);
	bool (*isolate_page)(struct page *, isolate_mode_t);
	void (*putback_page)(struct page *);
	int (*launder_page) (struct page *);
	int (*is_partially_uptodate) (struct page *, unsigned long,
					unsigned long);
	void (*is_dirty_writeback) (struct page *, bool *, bool *);
	int (*error_remove_page)(struct address_space *, struct page *);

	/* swapfile support */
	int (*swap_activate)(struct swap_info_struct *sis, struct file *file,
				sector_t *span);
	void (*swap_deactivate)(struct file *file);
};

#+END_SRC
*** フィールド
    | readpage    | ページ読み込み処理                                                                          |
    | writepage   | ページ書き込み処理                                                                          |
    | write_begin | ページ書き込み処理に関する初期化や調整                                                      |
    | write_end   | ページ書き込み処理に関する後片付け                                                          |
    | bmap        | ファイルが書き込まれているブロックの論理番号から、論理ブロック番号を取得する（HDDとしての） |
** inode_operations構造体
*** 概要
    inodeを操作する関数郡を保持する構造体
#+BEGIN_SRC c
/////
// include/linux/fs.h inode_operations構造体
/////
struct inode_operations {
	struct dentry * (*lookup) (struct inode *,struct dentry *, unsigned int);
	const char * (*get_link) (struct dentry *, struct inode *, struct delayed_call *);
	int (*permission) (struct inode *, int);
	struct posix_acl * (*get_acl)(struct inode *, int);

	int (*readlink) (struct dentry *, char __user *,int);

	int (*create) (struct inode *,struct dentry *, umode_t, bool);
	int (*link) (struct dentry *,struct inode *,struct dentry *);
	int (*unlink) (struct inode *,struct dentry *);
	int (*symlink) (struct inode *,struct dentry *,const char *);
	int (*mkdir) (struct inode *,struct dentry *,umode_t);
	int (*rmdir) (struct inode *,struct dentry *);
	int (*mknod) (struct inode *,struct dentry *,umode_t,dev_t);
	int (*rename) (struct inode *, struct dentry *,
			struct inode *, struct dentry *, unsigned int);
	int (*setattr) (struct dentry *, struct iattr *);
	int (*getattr) (const struct path *, struct kstat *, u32, unsigned int);
	ssize_t (*listxattr) (struct dentry *, char *, size_t);
	int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 start,
		      u64 len);
	int (*update_time)(struct inode *, struct timespec *, int);
	int (*atomic_open)(struct inode *, struct dentry *,
			   struct file *, unsigned open_flag,
			   umode_t create_mode, int *opened);
	int (*tmpfile) (struct inode *, struct dentry *, umode_t);
	int (*set_acl)(struct inode *, struct posix_acl *, int);
} ____cacheline_aligned;

#+END_SRC
* マクロ
** dprintf
#+BEGIN_SRC c
// #undef DEBUG ここでコントロール

#ifdef DEBUG
#define dprintf(x...)	printf(x)
#else
#define dprintf(x...)
#endif
#+END_SRC
   ここです。

   ぱっと見るに、デバッグ状態のときは実行され、その他のときは、特に何も行わないマクロであることがわかります。
*** 詳細(デバッグ状態の話)
    dprintfはprintfに置き換えられています。
    
    では、printfの定義を見てみましょう。fs/bfs/bfs.hに定義されています。
    
#+BEGIN_SRC c
/////
// fs/bfs/bfs.h printfマクロ
/////
#define printf(format, args...) \
	printk(KERN_ERR "BFS-fs: %s(): " format, __func__, ## args)
#+END_SRC

    printkのKERN_ERRでエラー出力を行うマクロです。
**** トークン連結演算子
    ここで使われている見慣れない記号、##はトークン連結演算子と呼ばれるれっきとしたC言語の機能です。
    マクロの定義で使用することができます。とりあえず、強引に右辺と左辺をくっつけることができ、コードにすることができます。
